import { Button, ListView, CheckBox } from "sixtyfps_widgets.60";

struct SixtyConfigOption := {
    placeholder: string,
    replace_with: string,
    enabled: bool,
    modified: bool,
}


ButtonBar := Rectangle {
	callback buttonpressed(int);	
	property <[string]> button_texts;

	background: @linear-gradient(90deg, #5e81ac 0%, #b48ead 100%);
	height: 40px;
	HorizontalLayout {
		alignment: end;
		for title[i] in button_texts : Button {
			property <int> ind: i;
			padding: 5px;
			height: parent.height;
			text: title;
			clicked => { root.buttonpressed(ind); }
		}
	}
}

ConfigEdit := Rectangle {
	callback buttonpressed(int);
	callback sync_value(int, SixtyConfigOption);
	callback sync_placeholder_string(string, bool);

	property <string> placeholder_string;
	property <[SixtyConfigOption]> config_options;
	property <bool> enable_merge_button;
	
	width: 600px;
	
	placeholder_launch_edit := TextInput {
		height: 30px;
		text: placeholder_string;
		edited => {
			sync_placeholder_string(text, enable_merge_button);
		}
	}

	ListView {
		y: placeholder_launch_edit.height;
		height: parent.height - button_bar.height - placeholder_launch_edit.height;
		for option[i] in config_options : HorizontalLayout {
			width: parent.width;
			property <int> ind: i;
			property <SixtyConfigOption> config_opt: option;
			alignment: end;
			VerticalLayout {
				height: 50px;
				HorizontalLayout {
					width: 600px - checkbox.width;
					Text {
						text: "Placeholder string:";
					}
					TextInput {
						horizontal-alignment: TextHorizontalAlignment.left;
						single-line: true;
						wrap: TextWrap.word-wrap;
						text: option.placeholder;
						edited => {
							config_opt.placeholder = text;
							config_opt.modified = true;
							root.sync_value(ind, config_opt);
						}
					}
				}
				HorizontalLayout {
					Text {
						text: "Replace With string:";
					}
					TextInput {
						horizontal-alignment: TextHorizontalAlignment.left;
						single-line: true;
						wrap: TextWrap.word-wrap;
						text: option.replace_with;
						edited => {
							config_opt.replace_with = text;
							config_opt.modified = true;
							root.sync_value(ind, config_opt);
						}
					}
				}
			}
			checkbox := CheckBox {
				width: 50px;
				checked: option.enabled; 
				toggled => { 
					config_opt.enabled = !config_opt.enabled;
					root.sync_value(ind, config_opt);
				}
			}
		}
	}

	button_bar := ButtonBar {
		button_texts: enable_merge_button ? ["Add Item", "Back", "Save", "Merge Global Config"] : ["Add Item", "Back", "Save"];
		y: parent.height - height;

		buttonpressed(index) => { root.buttonpressed(index); }
	}
}

Main := Window {
	title: "SteamTinkerLaunch-rs";
	height: 400px;
	width: 600px;
	
	callback quit();
	
	callback save_config(bool);
	
	callback merge_global_into_game();
	callback sync_config_opt(int, SixtyConfigOption, bool);
	callback add_item(bool);
	callback sync_placeholder_string(string, bool);

	callback print_val(int);

	property <image> banner;
	property <string> appid;
	property <bool> launch_cancelled: true;

	property <[SixtyConfigOption]> game_config_options <=> game_config_layout.config_options;
	property <[SixtyConfigOption]> global_config_options <=> global_config_layout.config_options;
	property <string> game_launch_placeholder <=> game_config_layout.placeholder_string;
	property <string> global_launch_placeholder <=> global_config_layout.placeholder_string;

	// The first layout you see when the software starts up
	startup_layout := Rectangle {
		HorizontalLayout {
			alignment: start;
			padding: 0px;
			spacing: 5px;
			Image {
				source: banner;
				height: parent.height - button_bar.height;
				width: banner.width * height / banner.height;
			}
			VerticalLayout {
				Text {
					text: appid;
					font-size: 20px;
				}
			}
		}
		button_bar := Rectangle {
			background: @linear-gradient(90deg, #5e81ac 0%, #b48ead 100%);
			height: 40px;
			y: parent.height - height;
			HorizontalLayout {
				alignment: end;
				Button {
					width: 100px;
					padding: 5px;
					height: parent.height;
					text: "Cancel Launch";
					clicked => { launch_cancelled = true; root.quit(); }
				}
				Button {
					width: 100px;
					padding: 5px;
					height: parent.height;
					text: "Game Config";
					clicked => { 
						startup_layout.visible = false;
						game_config_layout.visible = true;
					}
				}
				Button {
					width: 100px;
					padding: 5px;
					height: parent.height;
					text: "Global Config";
					clicked => { 
						startup_layout.visible = false;
						global_config_layout.visible = true;
					}
				}
				Button {
					width: 100px;
					padding: 5px;
					height: parent.height;
					text: "Start Game";
					clicked => { launch_cancelled = false; root.quit(); }
				}
			}
		}
	}
	game_config_layout := ConfigEdit {
		visible: false;
		enable_merge_button: true;

		buttonpressed(index) => {
			if (index == 0) {
				root.add_item(true);
			}
			if (index == 1) {
				game_config_layout.visible = false;
				startup_layout.visible = true;
			}
			if (index == 2) {
				root.save_config(true);
			}
			if (index == 3) {
				root.merge_global_into_game();
			}
		}

		sync_placeholder_string(text, is_game_config) => {
			root.sync_placeholder_string(text, is_game_config);
		}

		sync_value(index, config_opt) => {
			root.sync_config_opt(index, config_opt, true);
		}
	}
	global_config_layout := ConfigEdit {
		visible: false;
		enable_merge_button: false;

		buttonpressed(index) => {
			if (index == 0) {
				root.add_item(false);
			}
			if (index == 1) {
				global_config_layout.visible = false;
				startup_layout.visible = true;
			}
			if (index == 2) {
				root.save_config(false);
			}
		}
		
		sync_placeholder_string(text, is_game_config) => {
			root.sync_placeholder_string(text, is_game_config);
		}

		sync_value(index, config_opt) => {
			root.sync_config_opt(index, config_opt, false);
		}
	}
}
