import { StyleMetrics, Button, ListView, CheckBox, LineEdit, HorizontalBox, VerticalBox, TabWidget } from "sixtyfps_widgets.60";
import { ConfigEdit, SixtyConfigOption, SixtyConfigCommand } from "config_edit.60";

Main := Window {
	title: "SteamTinkerLaunch-rs";
	
	height: 400px;
	width: 800px;
	
	callback quit();
	
	callback save_config(bool);
	
	callback merge_global_into_game();
	callback sync_config_opt(int, SixtyConfigOption, bool);
	callback sync_config_cmd(int, SixtyConfigCommand, bool, bool);
	callback remove_config_opt(int, bool);
	callback remove_config_cmd(int, bool, bool);
	callback add_config_opt(bool);
	callback add_config_cmd(bool, bool);
	callback sync_placeholder_string(string, bool);

	callback print_val(int);

	property <image> banner;
	property <image> logo;
	property <string> appid;
	property <bool> launch_cancelled: true;
	
	property <[SixtyConfigCommand]> game_pre_launch_commands <=> game_config_layout.pre_launch_commands; 
	property <[SixtyConfigCommand]> game_post_exit_commands <=> game_config_layout.post_exit_commands; 
	property <[SixtyConfigCommand]> global_pre_launch_commands <=> global_config_layout.pre_launch_commands; 
	property <[SixtyConfigCommand]> global_post_exit_commands <=> global_config_layout.post_exit_commands; 
	property <[SixtyConfigOption]> game_config_options <=> game_config_layout.config_options;
	property <[SixtyConfigOption]> global_config_options <=> global_config_layout.config_options;
	property <string> game_launch_placeholder <=> game_config_layout.placeholder_string;
	property <string> global_launch_placeholder <=> global_config_layout.placeholder_string;
	
	TabWidget {
	// The first layout you see when the software starts up
		Tab {
			title: "Start Menu";
			startup_layout := FocusScope {
				has-focus: false;
				key-pressed(event) => {
					debug(event.text);
					accept
				}
				Image {
					image-fit: cover;
					source: banner;
					height: parent.height;
					width: 600px;
					source-clip-x: 200;
					source-clip-y: 0;
					source-clip-width: banner.width;
					source-clip-height: banner.height;
					Image {
						source: logo;
						width: 200px;
					}
				}
				VerticalBox {
					width: 190px;
					x: parent.width - width;
					alignment: end;
					Button {
						width: 180px;
						height: 60px;
						text: "Cancel Launch";
						clicked => { launch_cancelled = true; root.quit(); }
					}
					Button {
						width: 180px;
						height: 60px;
						text: "Start Game";
						clicked => { launch_cancelled = false; root.quit(); }
					}
				}
			}
		}
		Tab {
			title: "Game Config";
			game_config_layout := ConfigEdit {
				enable_merge_button: true;
				width: parent.width;
				height: parent.height;

				buttonpressed(index) => {
					if (index == 0) { // Merge global into game
						root.merge_global_into_game();
					}
					if (index == 1) { // Add pre-launch command
						root.add_config_cmd(true, true);
					}
					if (index == 2) { // Add post-exit command
						root.add_config_cmd(false, true);
					}
					if (index == 3) { // Add config option
						root.add_config_opt(true);
					}
					if (index == 4) { // Save config
						root.save_config(true);
					}
				}
				
				// Sync the string with the placeholders to the rust variables
				sync_placeholder_string(text, is_game_config) => {
					root.sync_placeholder_string(text, is_game_config);
				}
				
				// Sync a specific config option to either global or game config with an index
				sync_config_opt(index, config_opt) => {
					root.sync_config_opt(index, config_opt, true);
				}
				
				// Sync a pre-launch or post-exit command to global or game config with an index
				sync_config_cmd(index, config_opt, is_pre_launch) => {
					root.sync_config_cmd(index, config_opt, is_pre_launch, true);
				}
				
				// Remove specific config option from global or game config with an index
				remove_config_opt(index) => {
					root.remove_config_opt(index, true);
				}

				// Remove specific pre-launch or post-exit command from global or game config with an index
				remove_config_cmd(index, is_pre_launch) => {
					root.remove_config_cmd(index, is_pre_launch, true);
				}
			}
		}
		Tab {
			title: "Global Config";
			global_config_layout := ConfigEdit {
				enable_merge_button: false;
				width: parent.width;
				height: parent.height;

				buttonpressed(index) => {
					if (index == 0) { // Add pre-launch command
						root.add_config_cmd(true, false);
					}
					if (index == 1) { // Add post-exit command
						root.add_config_cmd(false, false);
					}
					if (index == 2) { // Add config option
						root.add_config_opt(false);
					}
					if (index == 3) { // Save config
						root.save_config(false);
					}
				}
				
				// Sync the string with the placeholders to the rust variables
				sync_placeholder_string(text, is_game_config) => {
					root.sync_placeholder_string(text, is_game_config);
				}

				// Sync a specific config option to either global or game config with an index
				sync_config_opt(index, config_opt) => {
					root.sync_config_opt(index, config_opt, false);
				}
				
				// Sync a pre-launch or post-exit command to global or game config with an index
				sync_config_cmd(index, config_opt, is_pre_launch) => {
					root.sync_config_cmd(index, config_opt, is_pre_launch, false);
				}

				// Remove specific config option from global or game config with an index
				remove_config_opt(index) => {
					root.remove_config_opt(index, false);
				}
				
				// Remove specific pre-launch or post-exit command from global or game config with an index
				remove_config_cmd(index, is_pre_launch) => {
					root.remove_config_cmd(index, is_pre_launch, false);
				}
			}
		}
	}
}
